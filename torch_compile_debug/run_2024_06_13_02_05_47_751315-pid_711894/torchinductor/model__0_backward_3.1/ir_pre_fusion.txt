buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 1000}, None)]
buf0.unmet_dependencies = []
buf0.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 1000}, None),
        MemoryDep('tangents_1', c0, {c0: 1000}, None)]
buf0.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf0.group.device = cuda:0
buf0.group.iteration = (1000, 1)
buf0.sizes = ([1000], [])
primals_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
class buf0_loop_body:
    var_ranges = {z0: 1000}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_1', get_index_1)
        cos = ops.cos(load_1)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(cos, constant)
        mul_1 = ops.mul(load, mul)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_1', get_index_2)
        sin = ops.sin(load_2)
        neg = ops.neg(sin)
        mul_2 = ops.mul(mul_1, neg)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('tangents_1', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('primals_1', get_index_4)
        sin_1 = ops.sin(load_4)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_3 = ops.mul(sin_1, constant_1)
        mul_4 = ops.mul(load_3, mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('primals_1', get_index_5)
        cos_1 = ops.cos(load_5)
        mul_5 = ops.mul(mul_4, cos_1)
        add = ops.add(mul_2, mul_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf0', get_index_6, add, None)
        return store
buf0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, multi_processor_count=46), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '6e95335dfe32e7159670fdd0127b9a4b9aafe61a035a1d09d747878c52d0b360', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': False, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr1 + (x0), xmask)
        tmp2 = tl_math.cos(tmp1)
        tmp3 = 2.0
        tmp4 = tmp2 * tmp3
        tmp5 = tmp0 * tmp4
        tmp6 = tl_math.sin(tmp1)
        tmp7 = -tmp6
        tmp8 = tmp5 * tmp7
        tmp9 = tmp6 * tmp3
        tmp10 = tmp0 * tmp9
        tmp11 = tmp10 * tmp2
        tmp12 = tmp8 + tmp11
        tl.store(out_ptr0 + (x0), tmp12, xmask)


